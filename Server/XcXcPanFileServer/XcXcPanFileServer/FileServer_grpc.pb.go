// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: FileServer.proto

package XcXcPanFileServer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	XcXcPanFileService_SayHello_FullMethodName    = "/XcXcPanFileServer.XcXcPanFileService/SayHello"
	XcXcPanFileService_UploadChunk_FullMethodName = "/XcXcPanFileServer.XcXcPanFileService/UploadChunk"
	XcXcPanFileService_DelChunk_FullMethodName    = "/XcXcPanFileServer.XcXcPanFileService/DelChunk"
)

// XcXcPanFileServiceClient is the client API for XcXcPanFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XcXcPanFileServiceClient interface {
	SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
	UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...grpc.CallOption) (*UploadChunkResponse, error)
	DelChunk(ctx context.Context, in *DelChunkRequest, opts ...grpc.CallOption) (*DelChunkResponse, error)
}

type xcXcPanFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXcXcPanFileServiceClient(cc grpc.ClientConnInterface) XcXcPanFileServiceClient {
	return &xcXcPanFileServiceClient{cc}
}

func (c *xcXcPanFileServiceClient) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SayHelloResponse)
	err := c.cc.Invoke(ctx, XcXcPanFileService_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xcXcPanFileServiceClient) UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...grpc.CallOption) (*UploadChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadChunkResponse)
	err := c.cc.Invoke(ctx, XcXcPanFileService_UploadChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xcXcPanFileServiceClient) DelChunk(ctx context.Context, in *DelChunkRequest, opts ...grpc.CallOption) (*DelChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelChunkResponse)
	err := c.cc.Invoke(ctx, XcXcPanFileService_DelChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XcXcPanFileServiceServer is the server API for XcXcPanFileService service.
// All implementations must embed UnimplementedXcXcPanFileServiceServer
// for forward compatibility.
type XcXcPanFileServiceServer interface {
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	UploadChunk(context.Context, *UploadChunkRequest) (*UploadChunkResponse, error)
	DelChunk(context.Context, *DelChunkRequest) (*DelChunkResponse, error)
	mustEmbedUnimplementedXcXcPanFileServiceServer()
}

// UnimplementedXcXcPanFileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXcXcPanFileServiceServer struct{}

func (UnimplementedXcXcPanFileServiceServer) SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedXcXcPanFileServiceServer) UploadChunk(context.Context, *UploadChunkRequest) (*UploadChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (UnimplementedXcXcPanFileServiceServer) DelChunk(context.Context, *DelChunkRequest) (*DelChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelChunk not implemented")
}
func (UnimplementedXcXcPanFileServiceServer) mustEmbedUnimplementedXcXcPanFileServiceServer() {}
func (UnimplementedXcXcPanFileServiceServer) testEmbeddedByValue()                            {}

// UnsafeXcXcPanFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XcXcPanFileServiceServer will
// result in compilation errors.
type UnsafeXcXcPanFileServiceServer interface {
	mustEmbedUnimplementedXcXcPanFileServiceServer()
}

func RegisterXcXcPanFileServiceServer(s grpc.ServiceRegistrar, srv XcXcPanFileServiceServer) {
	// If the following call pancis, it indicates UnimplementedXcXcPanFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&XcXcPanFileService_ServiceDesc, srv)
}

func _XcXcPanFileService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XcXcPanFileServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XcXcPanFileService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XcXcPanFileServiceServer).SayHello(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XcXcPanFileService_UploadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XcXcPanFileServiceServer).UploadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XcXcPanFileService_UploadChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XcXcPanFileServiceServer).UploadChunk(ctx, req.(*UploadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XcXcPanFileService_DelChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XcXcPanFileServiceServer).DelChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XcXcPanFileService_DelChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XcXcPanFileServiceServer).DelChunk(ctx, req.(*DelChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XcXcPanFileService_ServiceDesc is the grpc.ServiceDesc for XcXcPanFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XcXcPanFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "XcXcPanFileServer.XcXcPanFileService",
	HandlerType: (*XcXcPanFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _XcXcPanFileService_SayHello_Handler,
		},
		{
			MethodName: "UploadChunk",
			Handler:    _XcXcPanFileService_UploadChunk_Handler,
		},
		{
			MethodName: "DelChunk",
			Handler:    _XcXcPanFileService_DelChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "FileServer.proto",
}
