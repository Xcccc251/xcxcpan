// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: FileServer.proto

package xcxcpanfileservice

import (
	"context"

	"XcxcPan/Server/XcXcPanFileServer/XcXcPanFileServer"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	SayHelloRequest    = XcXcPanFileServer.SayHelloRequest
	SayHelloResponse   = XcXcPanFileServer.SayHelloResponse
	UploadFileRequest  = XcXcPanFileServer.UploadFileRequest
	UploadFileResponse = XcXcPanFileServer.UploadFileResponse

	XcXcPanFileService interface {
		SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
		UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	}

	defaultXcXcPanFileService struct {
		cli zrpc.Client
	}
)

func NewXcXcPanFileService(cli zrpc.Client) XcXcPanFileService {
	return &defaultXcXcPanFileService{
		cli: cli,
	}
}

func (m *defaultXcXcPanFileService) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	client := XcXcPanFileServer.NewXcXcPanFileServiceClient(m.cli.Conn())
	return client.SayHello(ctx, in, opts...)
}

func (m *defaultXcXcPanFileService) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	client := XcXcPanFileServer.NewXcXcPanFileServiceClient(m.cli.Conn())
	return client.UploadFile(ctx, in, opts...)
}
